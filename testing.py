from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
import os
import sqlite3 
import keyboards as kb
import logging.handlers
import logging
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
import random

bot = Bot(token="5304965757:AAH7-0otuTLbWBDFjalcg99MNu7qVWm7ihA")
dp = Dispatcher(bot,storage=MemoryStorage())
conn = sqlite3.connect('lukianov.db')
cur = conn.cursor()

admin_id=[1979922062]
#1741261245
#1979922062

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
logger = logging.getLogger(__name__)
# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("Logs", exist_ok=True)
# C–æ–∑–¥–∞—ë—Ç –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
logging.basicConfig(  # –ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ, —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –±–æ—Ç–∞
    level=logging.INFO,
    format="[%(levelname)-8s %(asctime)s at           %(funcName)s]: %(message)s",
    datefmt="%d.%d.%Y %H:%M:%S",
    handlers=[logging.handlers.RotatingFileHandler("Logs/     TGBot.log", maxBytes=10485760, backupCount=0),
    logging.StreamHandler()])


cur.execute("""CREATE TABLE IF NOT EXISTS user(
name TEXT,
user_id INT);""")

cur.execute("""CREATE TABLE IF NOT EXISTS menu(
card_id INT,
food_name TEXT,
description TEXT,
prise INT,
photo_id TEXT);""")

cur.execute("""CREATE TABLE IF NOT EXISTS efemer(
id TEXT,
product TEXT,
price INT,
address TEXT,
mobile_phone TEXT);""")


class States(StatesGroup):  # –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    DEFOLT_STATE = State()
    ADMIN_DEFOLT_STATE = State()
 
    ID_ORDER = State() #–∑–∞–ø—Ä–æ—Å id –∫–∞—Ä—Ç–æ—á–∫–∏ 
    SEND_STATE = State() #–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç —é–∑–µ—Ä
    ADDRESS_STATE = State() #–∞–¥—Ä–µ—Å
    MOBILE_PHONE_STATE = State() #–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """–ú–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    ADMIN_PRODUCT_NAME = State()
    ADMIN_PRODUCT_DESCRIPTION = State()
    ADMIN_PRODUCT_PRICE = State()
    ADMIN_PRODUCT_PHOTO = State()
    ADMIN_END = State()


@dp.message_handler(commands=["start"])
async def start(message: Message):
    
    if cur.execute(f"SELECT user_id FROM user WHERE user_id='{message.from_user.id}'").fetchone() is None:
        cur.execute(f"INSERT INTO user VALUES(?,?)",(message.from_user.full_name,message.from_user.id))
        conn.commit()

        cur.execute(f"INSERT INTO efemer VALUES(?,?,?,?,?)",(message.from_user.id,None,None,None,None))
        conn.commit()

    if message.from_user.id in admin_id:
        await message.answer("–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",reply_markup=kb.admin_keyboard)
        await States.ADMIN_DEFOLT_STATE.set()
    else:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —á–∞—Ç –±–æ—Ç —à–∞—à–ª—ã—á–Ω–æ–≥–æ —Ç–µ—Ä–µ–º–∫–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑.", reply_markup=kb.start_keyboard)
        await States.DEFOLT_STATE.set()
        



@dp.message_handler(state=States.DEFOLT_STATE)
async def ReplyKeyboard_handling(message: Message):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text == "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üñä":
        for i in cur.execute("SELECT * FROM menu;"):

            await bot.send_photo(photo=i[4], caption=f"""–ê–π–¥–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {i[0]}
–ù–∞–∑–≤–∞–Ω–∏–µ –µ–¥—ã: {i[1]}
{i[2]}
–¶–µ–Ω–∞: {i[3]}""")
        await message.answer("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑?", reply_markup=kb.next_keyboard)
        
    elif message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é üßæ":
        for i in cur.execute("SELECT * FROM menu;"):
            id = i[0]
            food_name = i[1]
            food_description = i[2]
            food_price = i[3]
            food_photo = i[4]
            
        await bot.send_photo(photo=food_photo, caption=f"""–ê–π–¥–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {id}
    –ù–∞–∑–≤–∞–Ω–∏–µ –µ–¥—ã: {food_name}
    {food_description}
    –¶–µ–Ω–∞: {food_price}
    """)



@dp.message_handler(state=States.ADMIN_DEFOLT_STATE)
async def Admin_ReplyKeyboard_handling(message: Message, state: FSMContext):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É üñä":
        await message.answer("1/4 üóí \n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å")
        await States.ADMIN_PRODUCT_NAME.set()


@dp.message_handler(state=States.ADMIN_PRODUCT_NAME)
async def adding_name_to_menu(message: Message, state: FSMContext):
    await state.update_data(product_name=message.text)
    await message.answer("2/4 üóí \n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å")
    await States.ADMIN_PRODUCT_DESCRIPTION.set()

    
@dp.message_handler(state=States.ADMIN_PRODUCT_DESCRIPTION)
async def adding_description_to_menu(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("3/4 üóí \n\n–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å")
    await States.ADMIN_PRODUCT_PRICE.set()
    

@dp.message_handler(state=States.ADMIN_PRODUCT_PRICE)
async def adding_price_to_menu(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer("4/4 üóí \n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å")
    await States.ADMIN_PRODUCT_PHOTO.set()
    

@dp.message_handler(content_types=['photo'], state=States.ADMIN_PRODUCT_PHOTO)
async def end_to_adding_menu(message: Message, state: FSMContext):
    data = await state.get_data()
    await bot.send_photo(message.from_user.id, photo=message.photo[-1].file_id, caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {data["product_name"]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {data["description"]}\n–¶–µ–Ω–∞: {data["price"]}')
    await bot.answer("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É? ", reply_markup=kb.end_admin_keyboard)
    await States.ADMIN_END.set()


@dp.callback_query_handler(lambda c: c.data == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", state=States.DEFOLT_STATE)
async def save_card(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cur.execute("INSERT INTO menu VALUES(?, ?, ?, ?, ?);", (random.choice([i for i in range(100000)]), data["product_name"], data["description"], data["price"], call.photo.id))
    conn.commit()
    await call.edit_text("–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–µ–Ω—é ‚úÖ")

    
@dp.callback_query_handler(lambda c: c.data == "–ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å", state=States.DEFOLT_STATE)
async def return_admin(call: types.CallbackQuery, state: FSMContext):
    await call.edit_text("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ‚ùå", reply_markup=kb.admin_keyboard)
    await state.finish()
    
    
@dp.callback_query_handler(lambda c: c.data == '–°–∞–º–æ–≤—ã–≤–æ–∑', state=States.DEFOLT_STATE) #–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–∞–º–æ–≤—ã–≤–æ–∑
async def order_call(call: types.CallbackQuery):
    await call.edit_text("–û—Ç–ø—Ä–∞–≤—å ID –∏–∑ –º–µ–Ω—é —Ç–æ–≥–æ –±–ª—é–¥–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å")
    await States.ID_ORDER.set()


@dp.callback_query_handler(lambda c: c.data == '–î–æ—Å—Ç–∞–≤–∫–∞', state=States.DEFOLT_STATE) #–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–∞–º–æ–≤—ã–≤–æ–∑
async def call_addres(call: types.CallbackQuery):
    await call.answer("–ö–∞–∫–æ–π –≤–∞—à –∞–¥—Ä–µ—Å?")
    await States.ADDRESS_STATE.set()
    
@dp.message_handler(state=States.ADDRESS_STATE)
async def inp_addr(message: Message):  #–ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    try:
        cur.execute(f"UPDATE efemer SET address = '{message.text}'")
        conn.commit()
    except:
        await message.answer("–ó–Ω–∞–∫ –∫–æ–≤—ã—á–µ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –±–µ–∑ –Ω–∏—Ö")
    else:
        await message.answer("–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω")
        await message.answer("–û—Ç–ø—Ä–∞–≤—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ß—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è")
        await States.MOBILE_PHONE_STATE.set()

        
@dp.message_handler(state=States.MOBILE_PHONE_STATE)
async def mobile_phone(message: Message):
    try:
        cur.execute(f"UPDATE efemer SET mobile_phone = '{message.text}'")
        conn.commit()
    except:
        await message.answer("–ó–Ω–∞–∫ –∫–æ–≤—ã—á–µ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –±–µ–∑ –Ω–∏—Ö")
    else:
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω")
        
        await message.answer("")
        await States.MOBILE_PHONE_STATE.set()
    


    
@dp.message_handler(state=States.ID_ORDER)
async def inp_id_order(message: Message):  #–ø–æ–ª—É—á–µ–Ω–∏–µ id –±–ª—é–¥
    if message.text == "‚úÖ":
        await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        













    
if __name__ == "__main__":  # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π, –∞ –Ω–µ –∫–∞–∫ –º–æ–¥—É–ª—å
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")  # –í –∫–æ–Ω—Å–æ–ª–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–æ–∂—ë–Ω –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    executor.start_polling(  # –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        dispatcher=dp,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        # (–¥–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Ö–æ–¥–∏–ª–∏ –¥–æ –±–æ—Ç–∞)
        on_startup=logger.info("–ó–∞–≥—Ä—É–∑–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ!"), skip_updates=True)
    # –ï—Å–ª–∏ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, —Ç–æ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–µ–¥–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    