from aiogram.types import Message, ReplyKeyboardMarkup, InlineKeyboardMarkup, CallbackQuery
import logging.handlers
import logging
import os
import aiogram
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
import datetime
import asyncio
import json
import pytz
import operator
import dotenv
import ast
import random

dotenv.load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª .env

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é
def eval_code(code):
    parsed = ast.parse(code, mode='eval')
    fixed = ast.fix_missing_locations(parsed)
    compiled = compile(fixed, '<string>', 'eval')
    eval(compiled)


async def populateDict(user_id: int):  # –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è
    """
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç dict `USERS` —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ."""

    if str(user_id) in USERS:
        return

    USERS.update({
        str(user_id): {
        "Username": None,
        "Paragraph_date": [],
        "Paragraph_time": [],
        "Paragraph_text": [],
        "Plan_number": 0,
        'Experience': 0,
        "settings_delete_item": True,
        "settings_time_zone": "Europe/Moscow"
        }
    })


def saveDB(filename = "UsersDB.jsonc"):  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –≤ json —Ñ–∞–π–ª
  """
  –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª.
  """
  global USERS

  json.dump(
    USERS,
    open(filename, "w", encoding="utf-8"), ensure_ascii=False
  )


def loadDB(filename = "UsersDB.jsonc", default = {}):  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è –∏–∑ json —Ñ–∞–π–ª–∞

    if not os.path.exists(filename):
        return default

    return json.load(open(filename, encoding="utf-8"))


async def run():  # –§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–ª—Å—è —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ JSON"""

    with open("USERS_BGTASKS.jsonc") as f:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
        data = json.load(f)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é eval_code()
    asyncio.create_task([eval_code(i) for i in data])

USERS = loadDB()
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
logger = logging.getLogger(__name__)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("Logs", exist_ok=True)

# C–æ–∑–¥–∞—ë—Ç –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
logging.basicConfig(  # –ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ, —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –±–æ—Ç–∞
    level=logging.INFO,
    format="[%(levelname)-8s %(asctime)s at           %(funcName)s]: %(message)s",
    datefmt="%d.%d.%Y %H:%M:%S",
    handlers=[logging.handlers.RotatingFileHandler("Logs/     TGBot.log", maxBytes=10485760, backupCount=0),
    logging.StreamHandler()])

# –°–æ–∑–¥–∞—ë–º Telegram –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä:
Bot = aiogram.Bot(os.environ["TOKEN"])
DP = aiogram.Dispatcher(Bot, storage=MemoryStorage())
USERS_BGTASKS_JSON = loadDB("USERS_BGTASKS.jsonc", [])  # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USERS_BGTASKS = {}

class UserState(StatesGroup):  # –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º–µ–Ω–∏
    date = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—ã
    time = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    text = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞


async def find_user_plan(user_id):  # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
    plan = [USERS[user_id][i] for i in USERS[user_id].keys()]
    result = []
    for j in range(0, len(USERS[user_id]["Paragraph_text"])):  # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è —Ü–∏–∫–ª–æ–º –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—Å—ë, —á—Ç–æ –Ω–∞–º –Ω–∞–¥–æ
        result.append("\n------------------------------------------------------------------"
                        "\n–ü—É–Ω–∫—Ç {}\n\n–î–∞—Ç–∞: {}\n\n–í—Ä–µ–º—è: {}\n\n–¢–µ–∫—Å—Ç: {}".format(j + 1, plan[1][j], plan[2][j], plan[3][j]))

    return "".join(result)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç—Ç–æ –≤ —Ç–µ–∫—Å—Ç


async def end_of_filling(user_id, state):
    data = await state.get_data()  # –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    now = datetime.datetime.now(pytz.timezone(USERS[user_id]["settings_time_zone"]))  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤—Ä–µ–º—è —Å–µ–π—á–∞—Å
    user_date = now.replace(year=int(data['date'][0:4]), month=int(data['date'][5:7]), day=int(data['date'][8:10]))  # –ò —Å—Ç–∞–≤–∏–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    user_time = now.replace(hour=int(data['time'][0:2]), minute=int(data['time'][3:5]), second=int(data['time'][6:8]))

    if now > user_date and now > user_time:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã
        keyboard = InlineKeyboardMarkup()
        keyboard.add(aiogram.types.InlineKeyboardButton(
            text='–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç ‚ûï',
            callback_data='–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç ‚ûï'
        ))

        await Bot.send_message(user_id, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ! ‚ùå", reply_markup=keyboard)
        await state.finish()

    else:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã
        keyboard = InlineKeyboardMarkup()
        for i in ['–í—Å—ë –≤–µ—Ä–Ω–æ‚úÖ', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É üñä', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è üñä', "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üñä"]:
            keyboard.add(aiogram.types.InlineKeyboardButton(
                text=i,
                callback_data=i
            ))
        data = await state.get_data()
        await Bot.send_message(user_id,
                            f"üìù –¢–≤–æ–π –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ –ø–ª–∞–Ω: \n\n–î–∞—Ç–∞: {data['date']}\n\n–í—Ä–µ–º—è: {data['time']}\n\n–¢–µ–∫—Å—Ç –ø–ª–∞–Ω–∞: \n\n{data['text']}",
                            reply_markup=keyboard)
        await state.reset_state(
            with_data=False)  # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö


async def Bot_sends_message_when_time_comes(user_id, num):
    num = num - 1  # –í—ã—á–∏—Ç–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 1, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ –∏–Ω–¥–µ–∫—Å
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
    USERS[user_id]["Paragraph_time"].sort()
    USERS[user_id]["Paragraph_date"].sort()
    time = USERS[user_id]["Paragraph_time"][num]
    date = USERS[user_id]["Paragraph_date"][num]
    text = USERS[user_id]["Paragraph_text"][num]
    user_date = datetime.datetime.now(pytz.timezone(USERS[user_id]["settings_time_zone"])).replace(year=int(date[0:4]), month=int(date[5:7]), day=int(date[8:10]))  
    user_time = datetime.datetime.now(pytz.timezone(USERS[user_id]["settings_time_zone"])).replace(hour=int(time[0:2]), minute=int(time[3:5]), second=int(time[6:8]))

    while int(user_id) in USERS_BGTASKS or str(user_id) in str(USERS_BGTASKS_JSON):  # –°–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª
        now = datetime.datetime.now(pytz.timezone(USERS[user_id]["settings_time_zone"]))
        if now >= user_date and now >= user_time: 
            break

        await asyncio.sleep(5)

    """–ö–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –≤—Ä–µ–º—è, —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    await Bot.send_message(user_id, '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ! üîî \n–ù–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è –ø—É–Ω–∫—Ç–∞ {} —Å —Ç–µ–∫—Å—Ç–æ–º: \n{}\n\n{}'.format(USERS[user_id]["Paragraph_text"].index(text) + 1, text, '–¢–∞–∫ –∫–∞–∫ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, —Ç–æ –ø—É–Ω–∫—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –ø–ª–∞–Ω–∞.‚ùå\n–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"' if USERS[user_id]["settings_delete_item"] else ''))
    
    USERS[user_id]["Experience"] += 10
    if USERS[user_id]["settings_delete_item"]:
        USERS[user_id]["Paragraph_date"].remove(date)
        USERS[user_id]["Paragraph_time"].remove(time)
        USERS[user_id]["Paragraph_text"].remove(text)
        USERS[user_id]["Plan_number"] -= 1

    saveDB()
    
    """–û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à JSON —Ñ–∞–π–ª"""
    USERS_BGTASKS_JSON.remove('asyncio.create_task(Bot_sends_message_when_time_comes(str({}), {}))'.format(user_id, 1))
    
    for index, i in enumerate(USERS_BGTASKS_JSON):
        if index > 1 or int(i.split(',')[1][:-2]) > 1:
            USERS_BGTASKS_JSON[index] = i.split(',')[0] + ', ' + str((int(i.split(',')[1][:-2]) - 1)) + '))'

    open("USERS_BGTASKS.jsonc", 'w', encoding="utf-8").write(
        json.dumps(USERS_BGTASKS_JSON)  
    )

    try:
        USERS_BGTASKS[user_id][0][USERS[user_id]["Plan_number"]].cancel()
        del USERS_BGTASKS[user_id][0][USERS[user_id]["Plan_number"]]
    except:
        pass


@DP.message_handler(commands=["start"])      # –ö–û–ì–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–ò–®–ï–¢ /start
async def start(msg: Message):

    if str(msg.from_user.id) not in USERS:  # –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ–º —Å–ø–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await msg.answer("–ü—Ä–∏–≤–µ—Ç!üëã \n\n–Ø Telegram –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏–ª–∏ –º–µ—Å—è—Ü –≤–ø–µ—Ä—ë–¥! üìù"
                         "\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—ë –∏–º—è!")

        await populateDict(msg.from_user.id)
        await UserState.name.set()

    else:
        keyboard = ReplyKeyboardMarkup()
        keyboard.add(*['–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω üóì', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω üìù', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è', '–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å üë§', '–¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤ üèÜ'])
        await msg.answer("–ü—Ä–∏–≤–µ—Ç!üëã \n\n–Ø Telegram –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏–ª–∏ –º–µ—Å—è—Ü –≤–ø–µ—Ä—ë–¥! üìù", reply_markup=keyboard)


@DP.message_handler(state=UserState.name)  # –ö–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å name
async def adding_name_to_google_table(msg: Message, state: FSMContext):

    numbers_to_name = {msg.from_user.id: 1}  # –í –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Ü–∏—Ñ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–∏–±–∞–≤–ª—è—Ç—å—Å—è –∫ –Ω–∏–∫—É

    names = [USERS[i]['Username'] for i in USERS.keys()] # –ë–µ—Ä–µ–º –∏–º–µ–Ω–∞

    # –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ –µ–≥–æ –∏–º—è –≤ —Å—Ç–æ–ª–±—Ü–µ
    while msg.text in names:  # –ü–æ–∫–∞ –∏–º—è –≤—Å–µ –µ—â–µ –Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ, —Ç–æ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É —Ü–∏—Ñ—Ä—ã

        msg.text += str(numbers_to_name[msg.from_user.id])
        if msg.text in names:
            msg.text = msg.text[0:-1]  # –û—Ç–Ω–∏–º–∞–µ–º –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É, —á—Ç–æ–±—ã –ø—Ä–∏–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é
            numbers_to_name[msg.from_user.id] += 1
        else:
            break
        
    USERS[str(msg.from_user.id)]["Username"] = msg.text
    saveDB()

    keyboard = ReplyKeyboardMarkup()
    keyboard.add(*['–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω üóì', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω üìù', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è', '–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å üë§', '–¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤ üèÜ'])
    await msg.answer(("–¢–µ–ø–µ—Ä—å —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ! \n–¢–≤–æ—è –∏–º—è: {}".format(msg.text) if str(numbers_to_name[msg.from_user.id]) != msg.text[-1]
                     else '–¢–∞–∫–æ–µ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–∏–±–∞–≤–∏–ª–∏ –∫ –Ω–µ–º—É —Ü–∏—Ñ—Ä—É "{}" !\n\n–¢–≤–æ—ë –∏–º—è: {}'.format(numbers_to_name[msg.from_user.id], msg.text[0:3])) + "\n\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–æ–º.", reply_markup=keyboard)  # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∏–º—è

    await state.finish()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º state


@DP.message_handler(commands=["help"])      # –ö–û–ì–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–ò–®–ï–¢ /help
async def help(msg: Message):
    await msg.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é: \n\n–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω üóì - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Å–æ –≤—Å–µ–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏. \
    \n\n–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω üìù - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–£–¥–∞–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞. \n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ—Ç–∞. \
    \n\n–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å üë§ - –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø—ã—Ç–∞ –Ω–∞ —Ç–≤–æ—ë–º –∞–∫–∫–∞—É–Ω—Ç–µ, –∞ —Ç–∞–∫–∂–µ —Ç–≤–æ—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤. \
    \n–û–ø—ã—Ç - –æ–ø—Ä–µ–¥—ë–ª–µ–Ω–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: —É–¥–∞–ª–µ–Ω–∏–µ/–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è. \
    \n\n–¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤ üèÜ - –∏–≥—Ä–æ–∫–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–ø—ã—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ.")


@DP.callback_query_handler()
async def callback_worker(call: CallbackQuery, state: FSMContext):

    if call.data == '–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç ‚ûï':

        await call.message.edit_text("1/3 üóí \n\n–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—É–Ω–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2022-11-14, –≥–¥–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ - –≥–æ–¥, –≤—Ç–æ—Ä–æ–µ - –º–µ—Å—è—Ü, —Ç—Ä–µ—Ç—å–µ - –¥–µ–Ω—å.")
        await UserState.date.set()  # –î–µ–ª–∞–µ–º set() –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ date

    elif call.data == '–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç ‚ûñ':

        keyboard = InlineKeyboardMarkup()
        for i in range(1, len(USERS[str(call.from_user.id)]["Paragraph_text"]) + 1):
            keyboard.add(aiogram.types.InlineKeyboardButton(
                text=f"–ü—É–Ω–∫—Ç {i}",
                callback_data=i - 1
            ))
        await call.message.edit_text("–ö–∞–∫–æ–π –ø—É–Ω–∫—Ç —É–¥–∞–ª–∏—Ç—å? ‚ùå", reply_markup=keyboard)

    elif call.data == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É üñä':
        await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è –ø—É–Ω–∫—Ç–∞ üñä")
        await UserState.date.set()  # –î–µ–ª–∞–µ–º set() –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ date

    elif call.data == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è üñä':
        await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–Ω–∫—Ç–∞ üñä")
        await UserState.time.set()  # –î–µ–ª–∞–µ–º set() –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ time

    elif call.data == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üñä':
        await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–Ω–∫—Ç–∞ üñä")
        await UserState.text.set()  # –î–µ–ª–∞–µ–º set() –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ text

    elif call.data == '–í—Å—ë –≤–µ—Ä–Ω–æ‚úÖ':
        data = await state.get_data()  # data - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —Ä–∞–Ω–µ–µ
        USERS[str(call.from_user.id)]["Paragraph_date"].append(data['date'])
        USERS[str(call.from_user.id)]["Paragraph_time"].append(data['time'])
        USERS[str(call.from_user.id)]["Paragraph_text"].append(data['text'])
        USERS[str(call.from_user.id)]["Plan_number"] += 1
        USERS[str(call.from_user.id)]["Experience"] += 5
        res = []
        """–°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤"""
        for index, i in enumerate(USERS[str(call.from_user.id)]["Paragraph_text"]):
            res.append(USERS[str(call.from_user.id)]["Paragraph_text"][sorted(USERS[str(call.from_user.id)]["Paragraph_date"] if len(USERS[str(call.from_user.id)]["Paragraph_time"]) == len(set(USERS[str(call.from_user.id)]["Paragraph_time"])) else USERS[str(call.from_user.id)]["Paragraph_time"]).index(USERS[str(call.from_user.id)]["Paragraph_date"][index] if len(USERS[str(call.from_user.id)]["Paragraph_time"]) == len(set(USERS[str(call.from_user.id)]["Paragraph_time"])) else USERS[str(call.from_user.id)]["Paragraph_time"][index])])

        USERS[str(call.from_user.id)]["Paragraph_text"] = res
        USERS[str(call.from_user.id)]["Paragraph_date"].sort()
        USERS[str(call.from_user.id)]["Paragraph_time"].sort()
        saveDB()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(aiogram.types.InlineKeyboardButton(
                text="–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ üîî",
                callback_data="–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ üîî"
            ))

        await call.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ü—É–Ω–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–∞–Ω! ‚úÖ", reply_markup=keyboard)

        await state.finish()

    elif call.data == "–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ üîî":
        keyboard = InlineKeyboardMarkup()
        keyboard.add(aiogram.types.InlineKeyboardButton(
                text="–í—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ üîï",
                callback_data="–í—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ üîï"
            ))

        """–û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à JSON —Ñ–∞–π–ª"""

        try:
            USERS_BGTASKS[call.from_user.id].append({USERS[str(call.from_user.id)]["Plan_number"]: asyncio.create_task(Bot_sends_message_when_time_comes(str(call.from_user.id), USERS[str(call.from_user.id)]["Plan_number"]))}) # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É   
        except:
            USERS_BGTASKS[call.from_user.id] = []
            USERS_BGTASKS[call.from_user.id].append({USERS[str(call.from_user.id)]["Plan_number"]: asyncio.create_task(Bot_sends_message_when_time_comes(str(call.from_user.id), USERS[str(call.from_user.id)]["Plan_number"]))}) # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É   
        

        USERS_BGTASKS_JSON.append('asyncio.create_task(Bot_sends_message_when_time_comes(str({}), {}))'.format(call.from_user.id, USERS[str(call.from_user.id)]["Plan_number"]))

        with open("USERS_BGTASKS.jsonc", 'w') as f:
            json.dump(USERS_BGTASKS_JSON, f)  

        await call.message.edit_text("–¢–µ–ø–µ—Ä—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ! üîî", reply_markup=keyboard)
        
    elif call.data == "–í—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ üîï":
        """–û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à JSON —Ñ–∞–π–ª"""
        if USERS[str(call.from_user.id)]["Plan_number"] > 1:
            USERS_BGTASKS[call.from_user.id][0][2].cancel()  # –í—ã–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        else:
            USERS_BGTASKS[call.from_user.id][USERS[str(call.from_user.id)]["Plan_number"] - 1][USERS[str(call.from_user.id)]["Plan_number"]].cancel()  # –í—ã–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è  
            del USERS_BGTASKS[call.from_user.id][USERS[str(call.from_user.id)]["Plan_number"] - 1]

        USERS_BGTASKS_JSON.remove('asyncio.create_task(Bot_sends_message_when_time_comes(str({}), {}))'.format(call.from_user.id, USERS[str(call.from_user.id)]["Plan_number"]))
    
        for index, i in enumerate(USERS_BGTASKS_JSON):
            if index > 1 or int(i.split(',')[1][:-2]) > 1:
                USERS_BGTASKS_JSON[index] = i.split(',')[0] + ', ' + str((int(i.split(',')[1][:-2]) - 1)) + '))'


        open("USERS_BGTASKS.jsonc", 'w').write(
            json.dumps(USERS_BGTASKS_JSON)  
        )

        keyboard = InlineKeyboardMarkup()
        keyboard.add(aiogram.types.InlineKeyboardButton(
                text="–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ üîî",
                callback_data="–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ üîî"
            ))
        await call.message.edit_text("–¢–µ–ø–µ—Ä—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ! üîï", reply_markup=keyboard)

    elif call.data == "–£–¥–∞–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞":
        keyboard = InlineKeyboardMarkup()
        keyboard.add(aiogram.types.InlineKeyboardButton(
                text="–ò–∑–º–µ–Ω–∏—Ç—å üìù",
                callback_data="–£–¥–∞–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞"
        ))

        if USERS[str(call.from_user.id)]['settings_delete_item'] == True:
            USERS[str(call.from_user.id)]['settings_delete_item'] = False
            saveDB()
            await call.message.edit_text('–¢–µ–ø–µ—Ä—å –ø—É–Ω–∫—Ç –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –ø–ª–∞–Ω–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –Ω–∏–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è ‚ùå', reply_markup=keyboard)

        else:
            USERS[str(call.from_user.id)]['settings_delete_item'] = True
            saveDB()
            await call.message.edit_text('–¢–µ–ø–µ—Ä—å –ø—É–Ω–∫—Ç —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –ø–ª–∞–Ω–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –Ω–∏–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è ‚úÖ', reply_markup=keyboard)

    elif call.data == "–ß–∞—Å–æ—Å–æ–≤–æ–π –ø–æ—è—Å":
        keyboard = InlineKeyboardMarkup()
        for i in ["Europe/Moscow", 'Africa/Abidjan', 'America/Los_Angeles', 'Antarctica/South_Pole', 'Asia/Dubai', 'Australia/Sydney', 'Europe/Kaliningrad', 'Europe/Kiev', 'Europe/London', 'Europe/Berlin', 'Europe/Paris', 'Europe/Rome', 'Egypt', 'Poland', 'Japan', 'Etc/GMT+5']:
            keyboard.add(aiogram.types.InlineKeyboardButton(
                text=i,
                callback_data="zone{}".format(i)
            ))

        await call.message.edit_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ", reply_markup=keyboard)

    elif call.data.startswith("zone"):
        USERS[str(call.from_user.id)]["settings_time_zone"] = call.data[4:]
        saveDB()

        await call.message.edit_text("–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {} ‚úÖ".format(call.data[4:]))

    else:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        USERS[str(call.from_user.id)]["Paragraph_date"].pop(int(call.data))
        USERS[str(call.from_user.id)]["Paragraph_time"].pop(int(call.data))
        USERS[str(call.from_user.id)]["Paragraph_text"].pop(int(call.data))
        USERS[str(call.from_user.id)]["Experience"] += 5
        USERS[str(call.from_user.id)]["Plan_number"] -= 1
        USERS[str(call.from_user.id)]["Paragraph_time"].sort()
        USERS[str(call.from_user.id)]["Paragraph_date"].sort()
        saveDB()

        USERS_BGTASKS_JSON.remove('asyncio.create_task(Bot_sends_message_when_time_comes(str({}), {}))'.format(call.from_user.id, 1))
    
        for index, i in enumerate(USERS_BGTASKS_JSON):
            if index > 1 or int(i.split(',')[1][:-2]) > 1:
                USERS_BGTASKS_JSON[index] = i.split(',')[0] + ', ' + str((int(i.split(',')[1][:-2]) - 1)) + '))'


        open("USERS_BGTASKS.jsonc", 'w').write(
            json.dumps(USERS_BGTASKS_JSON)  
        )

        try:
            USERS_BGTASKS[call.from_user.id][USERS[str(call.from_user.id)][0]["Plan_number"]].cancel()
            del USERS_BGTASKS[call.from_user.id][USERS[str(call.from_user.id)][0]["Plan_number"]]
        except:
            pass

        await call.message.edit_text("–ü—É–Ω–∫—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –ø–ª–∞–Ω–∞! ‚ùå")



@DP.message_handler(state=UserState.date)  # –ö–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å date
async def adding_date_to_user_plan(msg: Message, state: FSMContext):

    try:
        now = datetime.datetime.now(pytz.timezone(USERS[str(msg.from_user.id)]["settings_time_zone"])).date()
        user_date = now.replace(year=int(msg.text[0:4]), month=int(msg.text[5:7]), day=int(msg.text[8:10]))
        if now > user_date or int(msg.text[5:7]) > 12 or int(msg.text[8:10]) > 31 or len(msg.text) > 10:
            await Bot.send_message(msg.from_user.id, "–í–≤–µ–¥—ë–Ω–∞—è –¥–∞—Ç–∞ –±—ã–ª–∞ –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –µ—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! ‚ùå")
        else:
            data = await state.get_data()
            if 'date' not in data:
                await state.update_data(date=msg.text)
                await Bot.send_message(msg.from_user.id, "2/3 üóí \n\n–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—É–Ω–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 20:58:05, 08:11:43")
                await UserState.time.set()
            else:
                await state.update_data(date=msg.text)
                await end_of_filling(str(msg.from_user.id), state)

    except:
        await Bot.send_message(msg.from_user.id, '–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ! ‚ùå')


@DP.message_handler(state=UserState.time)  # –ö–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å time
async def adding_time_to_user_plan(msg: Message, state: FSMContext):

    try:
        data = await state.get_data()
        now_time = datetime.datetime.now(pytz.timezone(USERS[str(msg.from_user.id)]["settings_time_zone"])).time()
        user_time = now_time.replace(hour=int(msg.text[0:2]), minute=int(msg.text[3:5]), second=int(msg.text[6:8]))
        if int(data['date'][8:11]) == datetime.datetime.now(pytz.timezone(USERS[str(msg.from_user.id)]["settings_time_zone"])).day and now_time > user_time \
                or int(msg.text[0:2]) > 24 or int(msg.text[3:5]) > 60 or int(msg.text[6:8]) > 60 or len(msg.text) > 8:
            await Bot.send_message(msg.from_user.id,
                                   "–í–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±—ã–ª–æ –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! ‚ùå")
        else:
            data = await state.get_data()
            if 'time' not in data:
                await state.update_data(time=msg.text)
                await Bot.send_message(msg.from_user.id, "3/3 üóí \n\n–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, –Ω–∞–º–µ—á–µ–Ω–Ω–æ–π —Ç–æ–±–æ–π —Ü–µ–ª–∏ –Ω–∞ –¥–∞—Ç—É –¥–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –ø–æ–º–æ—á—å —Ä–æ–¥–∏—Ç–µ–ª—è–º –ø–æ –¥–æ–º–∞—à–Ω–∏–º –¥–µ–ª–∞–º.")
                await UserState.text.set()
            else:
                await state.update_data(time=msg.text)
                await end_of_filling(str(msg.from_user.id), state)

    except:
        await Bot.send_message(msg.from_user.id, '–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ! ‚ùå')


@DP.message_handler(state=UserState.text)  # –ö–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å text
async def adding_text_to_user_plan(msg: Message, state: FSMContext):
    result = msg.text
    if result in USERS[str(msg.from_user.id)]["Paragraph_text"]:
        while True:
            result += str(len([i for i in USERS[str(msg.from_user.id)]["Paragraph_text"] if i == msg.text]) + random.randint(1, 100))
            await msg.answer('‚ùóÔ∏è –¶–∏—Ñ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞ –ø–ª–∞–Ω–∞, —Ç.–∫ –ø–ª–∞–Ω —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ')
            if result not in USERS[str(msg.from_user.id)]["Paragraph_text"]:
                break
        
    await state.update_data(text=result)
    await end_of_filling(str(msg.from_user.id), state)


@DP.message_handler()
async def ReplyKeyboard_handling(msg: Message):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    if str(msg.from_user.id) in USERS:

        if msg.text == '–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω üóì' or msg.text == '/show_plan':

            await msg.answer("–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω:{}".format(await find_user_plan(str(msg.from_user.id))) if USERS[str(msg.from_user.id)]['Paragraph_text'] else "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç—É –ø–ª–∞–Ω–∞!")

        elif msg.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω üìù' or msg.text == '/edit_plan':

            keyboard = InlineKeyboardMarkup()

            keyboard.add(aiogram.types.InlineKeyboardButton(
                text='–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç ‚ûï',
                callback_data='–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç ‚ûï'
            ))

            if USERS[str(msg.from_user.id)]['Paragraph_text']:
                keyboard.add(aiogram.types.InlineKeyboardButton(
                    text='–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç ‚ûñ',
                    callback_data='–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç ‚ûñ'
                ))

            await msg.answer("{}".format(f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω:{await find_user_plan(str(msg.from_user.id))}\n\n–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø–ª–∞–Ω?"
                                if USERS[str(msg.from_user.id)]['Paragraph_text'] else "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç—É –ø–ª–∞–Ω–∞! \n\n–°–æ–∑–¥–∞–π –∂–µ –µ–≥–æ!"), reply_markup=keyboard)

        elif msg.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è' or msg.text == '/settings':

            keyboard = InlineKeyboardMarkup()
            keyboard.add(aiogram.types.InlineKeyboardButton(
                text='1Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞',
                callback_data='–£–¥–∞–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞'
            ))
            keyboard.add(aiogram.types.InlineKeyboardButton(
                text= '2Ô∏è‚É£ –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å',
                callback_data='–ß–∞—Å–æ—Å–æ–≤–æ–π –ø–æ—è—Å'
            ))

            await msg.answer(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è \n\n1Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ - {} \n–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ: \n–ü—É–Ω–∫—Ç —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –ø–ª–∞–Ω–∞, –µ—Å–ª–∏ –±–æ—Ç –ø—Ä–∏—Å–ª–∞–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ. \n–ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ: \
                \n–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –±–æ—Ç–æ–º, –ø—É–Ω–∫—Ç –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –ø–ª–∞–Ω–∞\n\n2Ô∏è‚É£ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å - {} \n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–µ–º—É —Ä–µ–≥–∏–æ–Ω—É."
                .format("–í–∫–ª—é—á–µ–Ω–æ ‚úÖ" if USERS[str(msg.from_user.id)]["settings_delete_item"] else '–í—ã–∫–ª—é—á–µ–Ω–æ ‚ùå', USERS[str(msg.from_user.id)]["settings_time_zone"]), reply_markup=keyboard)
        
        elif msg.text == '–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å üë§' or msg.text == '/profile':
            await msg.answer(
                "–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§ \n\n–ò–º—è: {}\n\n–£—Ä–æ–≤–µ–Ω—å {}\n{}{}"
                .format(USERS[str(msg.from_user.id)]["Username"], 
                (USERS[str(msg.from_user.id)]["Experience"] // 20) + 1, 
                "üü¶" * ((USERS[str(msg.from_user.id)]["Experience"] - 20 * (USERS[str(msg.from_user.id)]["Experience"] // 20)) if USERS[str(msg.from_user.id)]["Experience"] >= 20 else USERS[str(msg.from_user.id)]["Experience"]), 
                "‚¨úÔ∏è" * ((20 - (USERS[str(msg.from_user.id)]["Experience"] - 20 * (USERS[str(msg.from_user.id)]["Experience"] // 20))) if USERS[str(msg.from_user.id)]["Experience"] >= 20 else 20 - USERS[str(msg.from_user.id)]["Experience"])
            ))

        elif msg.text == '–¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤ üèÜ' or msg.text == '/leaderboard':
            res = []
            dct = sorted({USERS[i]["Username"]: USERS[i]["Experience"] for i in USERS.keys()}.items(), key=operator.itemgetter(1))

            for i in dct:
                for index, j in enumerate(i):
                    res.append("{} - {} –æ–ø—ã—Ç–∞".format(("ü•á " if dct[0] == i else ("ü•à " if dct[1] == i else ("ü•â " if dct[2] == i else ''))) + j, i[index + 1]))
                    break

            await msg.answer(
                "–¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤ üèÜ\n\n{}".format("".join(res))
            )

    else:
        await msg.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É! ‚ùå")




if __name__ == "__main__":  # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π, –∞ –Ω–µ –∫–∞–∫ –º–æ–¥—É–ª—å
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")  # –í –∫–æ–Ω—Å–æ–ª–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–æ–∂—ë–Ω –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(run())
    except:
        pass
    executor.start_polling(  # –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        dispatcher=DP,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        # (–¥–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Ö–æ–¥–∏–ª–∏ –¥–æ –±–æ—Ç–∞)
        on_startup=logger.info("–ó–∞–≥—Ä—É–∑–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ!"), skip_updates=True)
    # –ï—Å–ª–∏ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, —Ç–æ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–µ–¥–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ